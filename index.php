<?php
//--1---))В PHP механизми  повторного использвания кода Это функции и классы. Функции позволяют обединить те логич. блоки кода, которые выполняют определенную задачу, и вызывать их в других частях кода. Классы  более сложные  позволяющие объединить свойства (переменные) и методы (функции), связанные с определенным объектом(тоисть соотвественоо состояние и поведение).
//
//Функции и классы в PHP могут быть использованы для  повторного использование кода, улучшение читаемости и поддерживаемости кода, улучшение модульности и масштабируемости программы, ускорение разработки и так далее.
//
//Я не могу очередно сказать все классы и функции которые исползовал но вот простой  пример.. использования функций . Предположим, у нас есть несколько блоков кода, которые выполняют одну и ту же операцию, например, вычисление суммы двух чисел. Вместо того, чтобы несколько раз писать этот код в разных частях программы, мы можем создать функцию, которая принимает два числа в качестве параметров и возвращает их сумму. Затем можем вызывать эту функцию в любом месте программы, где необходимо выполнить эту операцию. Это упрощает код, так как  нужно изменить только одну функцию, а не каждый блок кода, где он использован.
//
//Пример использования классов может быть следующим. Предположим, есть приложение для управления пользователями, и нужно создать и хранить информацию о пользователях, например имя, электронная почта, пароль . Мы можем создать класс "User" с свойствами, представляющими эти данные, и методами для выполнения операций, связанных с пользователями, например, регистрациюию и вход в систему . Затем можем создавать экземпляры этого класса для каждого пользователя и использовать их методы для управления данными пользователя в разных частях вашей программы. Это обеспечит структурирование и модульность кода, а также упрощает добавление новых функций и изменение поведения пользователей в дальнейшем.
//
//Конечно, если усугублятся тоPHP предлагает  еще   других инструментов и практик для повторного использования кода но глобально это функции и классы

//---4--- )
// можем получить аргументы переданные в PHP-скрипт с помощью командной строки, используя глобальный массив argv.($passed_arguments =  $argv)потом с помощю for а можем взять все аргументы ($passed_arguments[1], $passed_arguments[2] и так далее )

//---5---)
//      можем испозовать встроенный middleware  -- auth:api
Route::middleware('auth:api')->group(function () {

});
// если например у нас есть автор модел и у каждого автора может быть несолько книг в моделе автор пишем фунцию с названием книги   который возвращает   $books = $author->books; книги данного автора
//class Author extends Model
//{
//    public function books()
//    {
//        return $this->hasMany(Book::class, 'author_id');
//    }
//}